[
["index.html", "Libro de Apuntes Git Capítulo 1 Sobre el proyecto", " Libro de Apuntes Git R Ladies Chile 2020-08-03 Capítulo 1 Sobre el proyecto Queremos compilar apuntes y experiencias en español de las personas que asistieron a las sesiones del Club de Lectura de Happy Git with R de Jenny Bryan organizado por los capítulos de R Ladies en Chile (Santiago, Valparaíso y Concepción) entre junio y julio de 2020. También queremos que este libro de apuntes se transforme en el primer espacio de colaboración en GitHub para las personas que asistieron, en un ambiente apto para dudas y equivocaciones :) Pasos para colaborar: "],
["intro.html", "Capítulo 2 Introducción a Git", " Capítulo 2 Introducción a Git Jenny Bryan señala que Git es un sistema de control de versiones. Ahora bien, ¿qué es un sistema de control de versiones? Un sistema de control de versiones (Version Control System -VCS) es un sistema que registra los cambios realizados en un archivo o conjunto de archivos a lo largo del tiempo, de modo que puedas recuperar versiones específicas más adelante. Es fácil entenderlo como una máquina de tiempo que te ofrece la información registrada de tus decisiones en el pasado. Es como una fotografía que registra el estado de tus archivos en un determinado momento. Son como una serie de cuadros fotográficas que en conjunto van formando la historia de tu proyecto. Un VCS registra todos los cambios realizados en un archivo a lo largo del tiempo o trayectoria de trabajo de un proyecto determinado NADA DE LO QUE SE HACE SE PIERDE Y TODO SE PUEDE ARREGLAR Originalmente, el VCS se creó con el propósito de ayudar a los grupos de desarrolladores que trabajaban colaborativamente en grandes proyectos de software. De esta manera, git administra la evolución de un conjunto de archivos altamente estructurados llamados repositorios — Jenny Bryan. En la actualidad, git se usa como fuente de código para el manejo de archivos de la comunidad de ciencia de datos donde se administran variados tipos de archivos como datos, figuras y reportes. — Jenny Bryan Este sistema de control de versiones trabaja a través de tres pasos básicos: Modificación: cuando trabajamos con git nuestros archivos pueden ser rastreados o no rastreados. Los archivos rastreados son parte de las instantáneas que forman la historia del proyecto. En este sentido, un archivo es rastreado cuando comienza la primera etapa. Esta etapa es la modificación. La etapa de modificación, significa que se ha hecho algún cambio en el archivo, pero que aún no hemos comprometido ese cambio. Una vez que el modificado el archivo, git lo organiza y lo deja en estado “organizado” o “staged”. La modificación o el cambio podría ser adicionado, modificado o eliminado de los contenidos del archivo. Git nota en cualquier tiempo si modificamos nuestros archivos. Pero, no siempre queremos almacenar cualquier cambio hasta que los adicionemos al área de “staging área” Almacenamiento u organización de los cambios: cuando se organizan los cambios, nuestos archivos modificados se convierten en archivos organizados (stage files). En otras palabras, los cambios a esos archivos están listos para ser comprometidos (commited) al proyecto. Todos los archivos que están organizados serán parte de la próxima instantánea que tomemos en algún momento de la historia del proyecto. Compromiso del cambio: una vez que los cambios de un archivo están organizados y almacenados en el git, entonces están listos para ser comprometidos o están listos para hacer commit. De esta manera, colaboramos con otros desarrolladores y otros compañeros de equipo en un mismo proyecto. "],
["basicos.html", "Capítulo 3 Comandos básicos de Git", " Capítulo 3 Comandos básicos de Git "],
["instalacion.html", "Capítulo 4 Instalar y conectar Git, GitHub y RStudio", " Capítulo 4 Instalar y conectar Git, GitHub y RStudio "],
["flujos-de-trabajo.html", "Capítulo 5 Flujos de trabajo colaborativo 5.1 ¡Los hipervínculos (hyperlinks) son increíbles! 5.2 Examinar el historial de commits 5.3 Consultas basadas en archivos 5.4 Buscar información en GitHub", " Capítulo 5 Flujos de trabajo colaborativo Traducción del capítulo 29 “Time travel: See the past” del libro de “Happy Git with R” de Jenny Bryan A veces necesitarás volver a revisar varios documentos de tu proyecto, debido a que lo que buscas está bastantes atrás. Por ejemplo: “Me gustó más la paleta de colores que usamos en la visualización la semana pasada” “¿Qué pasó que tenemos un outlier en la figura Nº2?” “No está funcionando correctamente en Windows hace dos semanas” Seguramente para resolver todos estos problemas, tendrás que viajar en el tiempo al pasado de tus archivos y bases de datos. 5.1 ¡Los hipervínculos (hyperlinks) son increíbles! Esta es una de las funciones con la que GitHub (y GitLab o BitBucket) realmente se destaca. Podemos rápidamente explorar diferentes commits/states, cambiar entre ramas, inspeccionar documentos individuales y revisar la discusión entre issues, lo que lo hace una herramienta increiblemente poderosa. Sí, técnicamente puedes visitar todos los estados pasados de tu proyecto usando los comandos de Git localmente; pero esa opción es significamente más incomoda de realizar. Para eso, en general, tienes que revisar estados antiguos lo que acrecienta la probabilidad de cometer algún error agregando modificaciones en la rama (branch) incorrrecta. El trabajo con los hypervínculos de GitHub en tu repositorio e historial es una de las principales razones para realizar la sincronización del trabajo local con un copia en GitHub, debido a que involucra acciones remotas y de solo lectura, no habiendo posibilidades de comprometer un nuevo trabajo en la rama equivocada. 5.2 Examinar el historial de commits Para ingresar al historial de commits, haz click a la izquierda en el boton llamado “xyz commits” (como se ve en la imagen Nº1). Cada repositorio contará con un número distinto en donde está “xyz”, que corresponderá al número total de commits realizados en el pasado. Según el cliente local de Git, al hacer click incluso podrás visualizar una descripción gráfica del historial. Figura 5.1: Acceso al historial de todos los commits ya realizados. Al ingresar al historial de los commits, tendrás tres formas de obtener más información sobre cada commit en específico: Usando el icono de un portapapeles (o clipboard) puedes copiar el SHA-1 del commit. Al hacer eso, facilita que puedas hacer referencia a este en otros medios o documentos. Por ejemplo, puedes usarlo para hacer referencia a ese commit en específico en un issue o una conversación sobre ello. Haz click en el SHA-1 abreviado para ver las diferencias asociadas con el commit. El SHA-1 abreviado son los números y letras juntos a la derecha. Haz click en los signos de desigualdad dobles &lt;&gt; para revisar el estado del repositorio completo en ese momento. Figura 5.2: Ejemplo sobre cómo ver los detalles de cada commit en específico Para volver a la página principal del repositorio, solo haz click en USUARIA/REPO que aparece arriba a la izquierda. De esa forma, irás de regreso al estado actual del repositorio. Una vez que identifiques el commit (o diff o file state) que buscabas, puedes copiar el URL de la web y usarlo para promover la discusión online en otro lado. De esta forma, por ejemplo, puedes atraer a otras personas a la vista exacta del repositorio. Este uso de los hyperlinks puede hacer que la discusión online sea mucho más precisa y eficiente. 5.3 Consultas basadas en archivos ¿Qué pasa si estás interesado/a en cómo un archivo específico llegó a ser cómo es? Entonces lo que tienes que hacer es ir al archivo de tu interés, y localizar los botones “Blame” y “History” en la esquina superior derecha (ver imagen nº3) Figura 5.3: Cómo revisar más detalles de un documento específico en GitHub. “Blame”: Esta visualización del archivo está relacionada con ciertos detalles sobre el origen de las líneas de comando. Te mostrará quién modificó por última vez cada línea del archivo, hace cuanto tiempo y el mensaje de confirmación asociado a ello. Haz click en el mensaje del commit para ver ese commit. O puedes hacer click en el icono con forma de rectángulos apilados para retroceder más en el tiempo. Esta forma puede ser útil para cuando se hace un análisis del proceso en un conjunto específico y pequeño de líneas de comando. “History”: Al ver en el historial de un archivo, podrás visibilizar los commits que afectan el archivo de interés. Esto lo verás de forma muy similar al historial completo de commits visto anteriormente. Este botón es útil para cuando estás intentando comprender algo un poco difuso y este historial te ayuda a tener un marco general de la historia del archivo. Hyperlinks a una línea específica en una fecha específica Cuando estés viendo un documento (file) en GitHub, puedes hacer click en el número de una línea para destacarlo. Usa click … shift-clic para seleccionar un rango de líneas. Un ejemplo de esto entregado por Jenny Bryan, lo encuentras en el siguiente link: https://github.com/OWNER/REPO/blob/SHA/path/to/file.R#L27-L31 Si el URL no contiene el SHA, escribe “y” para alternar en esta forma. El uso de estas URL y SHA específicos son una excelente forma de indicar a otras personas unas líneas de código en particular durante conversaciones en línea. Si puedes, y cómo buena práctica, usa los links más feos que contienen el SHA, ya que estos resistirán el paso del tiempo. 5.4 Buscar información en GitHub Para realizar cualquier búsqueda, GitHub cuenta siempre con el buscador en la esquina izquierda superior (ver imagen nº4). Figura 5.4: Barra de búsqueda de GitHub Una vez que ingreses un texto en la barra de búsqueda, un menú se despliega, entregándote la opción de buscar en el respositorio actual (el predeterminado) o en todo GitHub. Lo que hace GitHub es buscar en los contenidos de los documentos (files o descritos cómo “codes”), mensajes de commits y en los issues. Por lo cual puedes tomar ventaja de los resultados de búsqueda en estos diferentes dominios. Esta herramienta permite un preciso acercamiento a las líneas de códigos, volver a visitar un momento específico en el historial del proyecto de tu interés, o volver a descubrir una conversación. Búsqueda sobre un Issue específico Si lo que necesitas es buscar sobre un issue específico, entonces en el cuadro de búsqueda de cualquier página con los issues de un repositorio, escribe primero los filtros is:issue o is:open. "],
["ejercicios.html", "Capítulo 6 Ejercicios 6.1 Ejercicio FORK (sin usethis)", " Capítulo 6 Ejercicios 6.1 Ejercicio FORK (sin usethis) Gato tiene en su cuenta de GitHub un repositorio llamado mi_repo_genial y Perro ha visto este repositorio y quiere colaborar. Proceso de colaboración: Perro debe ir a Gato/mi_repo_genial y presionar el botón de fork. Al hacer click en fork, Perro ha creado Perro/mi_repo_genial, el cual es una copia de Gato/mi_repo_genial. Si Perro quiere trabajar en los archivos en su computador debe llevar su copia que está en GitHub hacia su computador. Para esto puede usar git clone o “proyecto existente, GitHub primero” de la sección 16. 3.1 Crear un nuevo proyecto de RStudio con control de versiones y Git y colocar como url: Perro/mi_repo_genial.git (este es el repo que esta en la cuenta de GitHub de Perro). Luego del proceso 3. Perro tiene los archivos de Gato/mi_repo_genial en su computador. Perro/mi_repo_genial es un repositorio remoto de Perro. Perro puede verificarlo al escribir git remote -v en el terminal. Es necesario que Perro declare como remoto upstream el repositorio de Gato. Para eso puede usar: git remote add upstream http://github.com/Gato/mi_repo_genial.git Para saber que todo está bien. Perro puede verificar que ahora tiene dos archivos remotos. Para esto puede usar: git remote -v en la terminal. Antes de empezar a modificar los archivos y agregar sus contribuciones Perro debe crear una nueva rama (recuerda que es recomendable no trabajar contribuciones desde la rama master). Perro puede escribir en la terminal git branch rama-perro. Ahora Perro puede modificar los archivos, hacer commit y push al remoto Perro/mi_repo_genial y hacer pull request para agregar los cambios a Gato/mi_repo_genial. Para esto puede usar su método favorito: desde la pestaña Git de Rstudio o desde la terminal usando: git push &lt;remote&gt; &lt;branch&gt;. Perro debe recordar que mañana cuando empiece a trabajar nuevamente en el repositorio, debe actualizar el remoto upstream haciendo pull. Para esto puede escribir en la terminal git pull upstream master --ff-only. "],
["materiales.html", "Capítulo 7 Materiales de interés", " Capítulo 7 Materiales de interés "]
]
