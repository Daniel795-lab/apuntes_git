[
["index.html", "Libro de Apuntes Git Capítulo 1 Sobre el proyecto", " Libro de Apuntes Git R Ladies Chile 2020-07-29 Capítulo 1 Sobre el proyecto Queremos compilar apuntes y experiencias en español de las personas que asistieron a las sesiones del Club de Lectura de Happy Git with R de Jenny Bryan organizado por los capítulos de R Ladies en Chile (Santiago, Valparaíso y Concepción) entre junio y julio de 2020. También queremos que este libro de apuntes se transforme en el primer espacio de colaboración en GitHub para las personas que asistieron, en un ambiente apto para dudas y equivocaciones :) Pasos para colaborar: "],
["intro.html", "Capítulo 2 Introducción a Git", " Capítulo 2 Introducción a Git Jenny Bryan señala que Git es un sistema de control de versiones. Ahora bien, ¿qué es un sistema de control de versiones? Un sistema de control de versiones (Version Control System -VCS) es un sistema que registra los cambios realizados en un archivo o conjunto de archivos a lo largo del tiempo, de modo que puedas recuperar versiones específicas más adelante. Es fácil entenderlo como una máquina de tiempo que te ofrece la información registrada de tus decisiones en el pasado. Es como una fotografía que registra el estado de tus archivos en un determinado momento. Son como una serie de cuadros fotográficas que en conjunto van formando la historia de tu proyecto. Un VCS registra todos los cambios realizados en un archivo a lo largo del tiempo o trayectoria de trabajo de un proyecto determinado NADA DE LO QUE SE HACE SE PIERDE Y TODO SE PUEDE ARREGLAR Originalmente, el VCS se creó con el propósito de ayudar a los grupos de desarrolladores que trabajaban colaborativamente en grandes proyectos de software. De esta manera, git administra la evolución de un conjunto de archivos altamente estructurados llamados repositorios — Jenny Bryan. En la actualidad, git se usa como fuente de código para el manejo de archivos de la comunidad de ciencia de datos donde se administran variados tipos de archivos como datos, figuras y reportes. — Jenny Bryan Este sistema de control de versiones trabaja a través de tres pasos básicos: Modificación: cuando trabajamos con git nuestros archivos pueden ser rastreados o no rastreados. Los archivos rastreados son parte de las instantáneas que forman la historia del proyecto. En este sentido, un archivo es rastreado cuando comienza la primera etapa. Esta etapa es la modificación. La etapa de modificación, significa que se ha hecho algún cambio en el archivo, pero que aún no hemos comprometido ese cambio. Una vez que el modificado el archivo, git lo organiza y lo deja en estado “organizado” o “staged”. La modificación o el cambio podría ser adicionado, modificado o eliminado de los contenidos del archivo. Git nota en cualquier tiempo si modificamos nuestros archivos. Pero, no siempre queremos almacenar cualquier cambio hasta que los adicionemos al área de “staging área” Almacenamiento u organización de los cambios: cuando se organizan los cambios, nuestos archivos modificados se convierten en archivos organizados (stage files). En otras palabras, los cambios a esos archivos están listos para ser comprometidos (commited) al proyecto. Todos los archivos que están organizados serán parte de la próxima instantánea que tomemos en algún momento de la historia del proyecto. Compromiso del cambio: una vez que los cambios de un archivo están organizados y almacenados en el git, entonces están listos para ser comprometidos o están listos para hacer commit. De esta manera, colaboramos con otros desarrolladores y otros compañeros de equipo en un mismo proyecto. "],
["basicos.html", "Capítulo 3 Comandos básicos de Git", " Capítulo 3 Comandos básicos de Git "],
["instalacion.html", "Capítulo 4 Instalar y conectar Git, GitHub y RStudio", " Capítulo 4 Instalar y conectar Git, GitHub y RStudio "],
["flujos-de-trabajo.html", "Capítulo 5 Flujos de trabajo colaborativo", " Capítulo 5 Flujos de trabajo colaborativo "],
["ejercicios.html", "Capítulo 6 Ejercicios 6.1 Ejercicio FORK (sin usethis)", " Capítulo 6 Ejercicios 6.1 Ejercicio FORK (sin usethis) Gato tiene en su cuenta de GitHub un repositorio llamado mi_repo_genial y Perro ha visto este repositorio y quiere colaborar. Proceso de colaboración: Perro debe ir a Gato/mi_repo_genial y presionar el botón de fork. Al hacer click en fork, Perro ha creado Perro/mi_repo_genial, el cual es una copia de Gato/mi_repo_genial. Si Perro quiere trabajar en los archivos en su computador debe llevar su copia que está en GitHub hacia su computador. Para esto puede usar git clone o “proyecto existente, GitHub primero” de la sección 16. 3.1 Crear un nuevo proyecto de RStudio con control de versiones y Git y colocar como url: Perro/mi_repo_genial.git (este es el repo que esta en la cuenta de GitHub de Perro). Luego del proceso 3. Perro tiene los archivos de Gato/mi_repo_genial en su computador. Perro/mi_repo_genial es un repositorio remoto de Perro. Perro puede verificarlo al escribir git remote -v en el terminal. Es necesario que Perro declare como remoto upstream el repositorio de Gato. Para eso puede usar: git remote add upstream http://github.com/Gato/mi_repo_genial.git Para saber que todo está bien. Perro puede verificar que ahora tiene dos archivos remotos. Para esto puede usar: git remote -v en la terminal. Antes de empezar a modificar los archivos y agregar sus contribuciones Perro debe crear una nueva rama (recuerda que es recomendable no trabajar contribuciones desde la rama master). Perro puede escribir en la terminal git branch rama-perro. Ahora Perro puede modificar los archivos, hacer commit y push al remoto Perro/mi_repo_genial y hacer pull request para agregar los cambios a Gato/mi_repo_genial. Para esto puede usar su método favorito: desde la pestaña Git de Rstudio o desde la terminal usando: git push &lt;remote&gt; &lt;branch&gt;. Perro debe recordar que mañana cuando empiece a trabajar nuevamente en el repositorio, debe actualizar el remoto upstream haciendo pull. Para esto puede escribir en la terminal git pull upstream master --ff-only. "],
["materiales.html", "Capítulo 7 Materiales de interés", " Capítulo 7 Materiales de interés "]
]
